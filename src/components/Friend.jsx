import React, { useState, useEffect } from "react";
import "../styles/Friend.css"; // Import CSS cho modal
import { FaUserFriends, FaUsers, FaUserPlus } from "react-icons/fa"; // Import icon t·ª´ react-icons
import SearchBar from "../components/SearchBar";
import FriendList from "./FriendList";
import GroupList from "./GroupList";
import FriendRequest from "./FriendRequest";
import { io } from 'socket.io-client';
const socket = io('https://cnm-service.onrender.com');

const Friend = ({onStartChat,user}) => {
  const [friends, setFriends] = useState([]); // Store friends data
  useEffect(() => {
      // Fetch friends data ngay sau khi setUser xong
      const fetchFriends = async () => {
        try {
          const response = await fetch("https://cnm-service.onrender.com/api/ContacsFriendByUserID", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ userID: user.userID }),
          });
          
          const data = await response.json();
          console.log("üì¶ Server response:", data);
          setFriends(data); // Set the friends data
        } catch (error) {
          setErrorMessage("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·∫°n b√®.");
        }
      };
      fetchFriends();
  }, []);
  useEffect(() => {
    if (!user?.userID) return;
    socket.emit("join_user", user.userID);
    socket.on("friend_request_accepted", (data) => {
      if(data.status ==="accepted"){
        console.log("friend_request_accepted",data);
        setFriends((prevRequests) =>[...prevRequests,data]); // X√≥a y√™u c·∫ßu ƒë√£ ch·∫•p nh·∫≠n
      }
    });
     socket.on("update_user", (updatedUser) => {
  setFriends((prevRequests) =>
    prevRequests.map((res) => {
      if (res.userID === updatedUser.userID) {
        return {
          ...res,
          name: updatedUser.name,
          anhDaiDien: updatedUser.anhDaiDien,
          sdt: updatedUser.sdt,
          trangThai: updatedUser.trangThai,
        };
      }
      return res;
    })
  );
});

    return () => {
      socket.off("friend_request_accepted");
      socket.off("update_user");
    }

  }, [user.userID]);
  
  console.log("friends", friends);
  

  // Tr·∫°ng th√°i ƒë·ªÉ qu·∫£n l√Ω view hi·ªán t·∫°i
  const [activeView, setActiveView] = useState("friends");

  // H√†m x·ª≠ l√Ω khi nh·∫•n v√†o t·ª´ng button
  const handleViewChange = (view) => {
    setActiveView(view); // C·∫≠p nh·∫≠t view khi nh·∫•n v√†o n√∫t
  };

  if (!user) {
    return <div>Loading...</div>; // N·∫øu ch∆∞a c√≥ th√¥ng tin ng∆∞·ªùi d√πng th√¨ hi·ªÉn th·ªã "Loading..."
  }

  console.log("user-----", user);

  return (
    <div className="profile-container">
      <div className="button-group">
        <SearchBar
           user={user}
        />
        <button
          className={`btn ${activeView === "friends" ? "active" : ""}`}
          onClick={() => handleViewChange("friends")}

        >
          <FaUserFriends className="icon" />
          Danh s√°ch b·∫°n b√®
        </button>

        <button
          className={`btn ${activeView === "groups" ? "active" : ""}`}
          onClick={() => handleViewChange("groups")}
        >
          <FaUsers className="icon" />
          Danh s√°ch nh√≥m
        </button>

        <button
          className={`btn ${activeView === "invites" ? "active" : ""}`}
          onClick={() => handleViewChange("invites")}
        >
          <FaUserPlus className="icon" />
          L·ªùi m·ªùi k·∫øt b·∫°n
        </button>
      </div>

      {/* N·ªôi dung hi·ªÉn th·ªã b√™n c·∫°nh */}
      <div className="content-container">
        {activeView === "friends" && <FriendList user={user} friends={friends} onStartChat={onStartChat} />}
        {activeView === "groups" && <GroupList user={user} />}
        {activeView === "invites" && <FriendRequest user={user} />}
      </div>
    </div>
  );
};

export default Friend;
